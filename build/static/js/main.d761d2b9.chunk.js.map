{"version":3,"sources":["candy-machine.ts","connection.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","Keypair","generate","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","CTAButton","styled","Button","MintButton","onMint","isMinting","isEnded","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","onClick","variant","CircularProgress","cluster","process","MainTitle","div","h1","TotalMinted","p","WhitelistNotification","IconContainer","InfoIcon","img","InfoContainer","IconLink","TotalItems","Price","ProjectDescription","ConnectButton","ul","WalletMultiButton","Card","Paper","MintButtonContainer","SolExplorerLink","MainContainer","LeftContainer","RightContainer","Image","BorderLinearProgress","LinearProgress","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","setItemsAvailable","setItemsRedeemed","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","setPrice","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","severity","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","displaySuccess","mintPublicKey","remaining","confetti","particleCount","spread","origin","y","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","cndy","divider","Array","join","presale","discountPrice","getTokenAccountBalance","tokenBalance","uiAmount","toDate","amount","limit","Math","min","className","src","alt","href","target","signTransaction","clusterUrl","options","autoShowModal","onMount","completed","onComplete","renderer","days","hours","minutes","seconds","elevation","Snackbar","autoHideDuration","onClose","Alert","require","network","Connection","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","buyer"],"mappings":"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","file":"static/js/main.d761d2b9.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachine> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        state.data.goLiveDate &&\r\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachine,\r\n    payer: anchor.web3.PublicKey,\r\n    mint: anchor.web3.Keypair\r\n): Promise<(string | undefined)[]> => {\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []],\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","import {\r\n    Keypair,\r\n    Commitment,\r\n    Connection,\r\n    RpcResponseAndContext,\r\n    SignatureStatus,\r\n    SimulatedTransactionResponse,\r\n    Transaction,\r\n    TransactionInstruction,\r\n    TransactionSignature,\r\n    Blockhash,\r\n    FeeCalculator,\r\n  } from '@solana/web3.js';\r\n  \r\n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n  \r\n  interface BlockhashAndFeeCalculator {\r\n    blockhash: Blockhash;\r\n    feeCalculator: FeeCalculator;\r\n  }\r\n  \r\n  export const getErrorForTransaction = async (\r\n    connection: Connection,\r\n    txid: string,\r\n  ) => {\r\n    // wait for all confirmation before geting transaction\r\n    await connection.confirmTransaction(txid, 'max');\r\n  \r\n    const tx = await connection.getParsedConfirmedTransaction(txid);\r\n  \r\n    const errors: string[] = [];\r\n    if (tx?.meta && tx.meta.logMessages) {\r\n      tx.meta.logMessages.forEach(log => {\r\n        const regex = /Error: (.*)/gm;\r\n        let m;\r\n        while ((m = regex.exec(log)) !== null) {\r\n          // This is necessary to avoid infinite loops with zero-width matches\r\n          if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n          }\r\n  \r\n          if (m.length > 1) {\r\n            errors.push(m[1]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  \r\n    return errors;\r\n  };\r\n  \r\n  export enum SequenceType {\r\n    Sequential,\r\n    Parallel,\r\n    StopOnFailure,\r\n  }\r\n  \r\n  export async function sendTransactionsWithManualRetry(\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[][],\r\n    signers: Keypair[][],\r\n  ): Promise<(string | undefined)[]> {\r\n    let stopPoint = 0;\r\n    let tries = 0;\r\n    let lastInstructionsLength = null;\r\n    let toRemoveSigners: Record<number, boolean> = {};\r\n    instructions = instructions.filter((instr, i) => {\r\n      if (instr.length > 0) {\r\n        return true;\r\n      } else {\r\n        toRemoveSigners[i] = true;\r\n        return false;\r\n      }\r\n    });\r\n    let ids: string[] = [];\r\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n  \r\n    while (stopPoint < instructions.length && tries < 3) {\r\n      instructions = instructions.slice(stopPoint, instructions.length);\r\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n  \r\n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n      else tries = 0;\r\n  \r\n      try {\r\n        if (instructions.length === 1) {\r\n          const id = await sendTransactionWithRetry(\r\n            connection,\r\n            wallet,\r\n            instructions[0],\r\n            filteredSigners[0],\r\n            'single',\r\n          );\r\n          ids.push(id.txid);\r\n          stopPoint = 1;\r\n        } else {\r\n          const { txs } = await sendTransactions(\r\n            connection,\r\n            wallet,\r\n            instructions,\r\n            filteredSigners,\r\n            SequenceType.StopOnFailure,\r\n            'single',\r\n          );\r\n          ids = ids.concat(txs.map(t => t.txid));\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      console.log(\r\n        'Died on ',\r\n        stopPoint,\r\n        'retrying from instruction',\r\n        instructions[stopPoint],\r\n        'instructions length is',\r\n        instructions.length,\r\n      );\r\n      lastInstructionsLength = instructions.length;\r\n    }\r\n  \r\n    return ids;\r\n  }\r\n  \r\n  export const sendTransactions = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructionSet: TransactionInstruction[][],\r\n    signersSet: Keypair[][],\r\n    sequenceType: SequenceType = SequenceType.Parallel,\r\n    commitment: Commitment = 'singleGossip',\r\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\r\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n    block?: BlockhashAndFeeCalculator,\r\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    const unsignedTxns: Transaction[] = [];\r\n  \r\n    if (!block) {\r\n      block = await connection.getRecentBlockhash(commitment);\r\n    }\r\n  \r\n    for (let i = 0; i < instructionSet.length; i++) {\r\n      const instructions = instructionSet[i];\r\n      const signers = signersSet[i];\r\n  \r\n      if (instructions.length === 0) {\r\n        continue;\r\n      }\r\n  \r\n      let transaction = new Transaction();\r\n      instructions.forEach(instruction => transaction.add(instruction));\r\n      transaction.recentBlockhash = block.blockhash;\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n  \r\n      if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n      }\r\n  \r\n      unsignedTxns.push(transaction);\r\n    }\r\n  \r\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n  \r\n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n  \r\n    let breakEarlyObject = { breakEarly: false, i: 0 };\r\n    console.log(\r\n      'Signed txns length',\r\n      signedTxns.length,\r\n      'vs handed in length',\r\n      instructionSet.length,\r\n    );\r\n    for (let i = 0; i < signedTxns.length; i++) {\r\n      const signedTxnPromise = sendSignedTransaction({\r\n        connection,\r\n        signedTransaction: signedTxns[i],\r\n      });\r\n  \r\n      signedTxnPromise\r\n        .then(({ txid, slot }) => {\r\n          successCallback(txid, i);\r\n        })\r\n        .catch(reason => {\r\n          // @ts-ignore\r\n          failCallback(signedTxns[i], i);\r\n          if (sequenceType === SequenceType.StopOnFailure) {\r\n            breakEarlyObject.breakEarly = true;\r\n            breakEarlyObject.i = i;\r\n          }\r\n        });\r\n  \r\n      if (sequenceType !== SequenceType.Parallel) {\r\n        try {\r\n          await signedTxnPromise;\r\n        } catch (e) {\r\n          console.log('Caught failure', e);\r\n          if (breakEarlyObject.breakEarly) {\r\n            console.log('Died on ', breakEarlyObject.i);\r\n            // Return the txn we failed on by index\r\n            return {\r\n              number: breakEarlyObject.i,\r\n              txs: await Promise.all(pendingTxns),\r\n            };\r\n          }\r\n        }\r\n      } else {\r\n        pendingTxns.push(signedTxnPromise);\r\n      }\r\n    }\r\n  \r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      await Promise.all(pendingTxns);\r\n    }\r\n  \r\n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n  };\r\n  \r\n  export const sendTransaction = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    awaitConfirmation = true,\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n  ) => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n  \r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n  \r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  \r\n    const rawTransaction = transaction.serialize();\r\n    let options = {\r\n      skipPreflight: true,\r\n      commitment,\r\n    };\r\n  \r\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n    let slot = 0;\r\n  \r\n    if (awaitConfirmation) {\r\n      const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        DEFAULT_TIMEOUT,\r\n        connection,\r\n        commitment,\r\n      );\r\n  \r\n      if (!confirmation)\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n      slot = confirmation?.slot || 0;\r\n  \r\n      if (confirmation?.err) {\r\n        const errors = await getErrorForTransaction(connection, txid);\r\n  \r\n        console.log(errors);\r\n        throw new Error(`Raw transaction ${txid} failed`);\r\n      }\r\n    }\r\n  \r\n    return { txid, slot };\r\n  };\r\n  \r\n  export const sendTransactionWithRetry = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n  ) => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n  \r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n  \r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  \r\n    if (beforeSend) {\r\n      beforeSend();\r\n    }\r\n  \r\n    const { txid, slot } = await sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: transaction,\r\n    });\r\n  \r\n    return { txid, slot };\r\n  };\r\n  \r\n  export const getUnixTs = () => {\r\n    return new Date().getTime() / 1000;\r\n  };\r\n  \r\n  const DEFAULT_TIMEOUT = 30000;\r\n  \r\n  export async function sendSignedTransaction({\r\n    signedTransaction,\r\n    connection,\r\n    timeout = DEFAULT_TIMEOUT,\r\n  }: {\r\n    signedTransaction: Transaction;\r\n    connection: Connection;\r\n    sendingMessage?: string;\r\n    sentMessage?: string;\r\n    successMessage?: string;\r\n    timeout?: number;\r\n  }): Promise<{ txid: string; slot: number }> {\r\n    const rawTransaction = signedTransaction.serialize();\r\n    const startTime = getUnixTs();\r\n    let slot = 0;\r\n    const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n    );\r\n  \r\n    console.log('Started awaiting confirmation for', txid);\r\n  \r\n    let done = false;\r\n    (async () => {\r\n      while (!done && getUnixTs() - startTime < timeout) {\r\n        connection.sendRawTransaction(rawTransaction, {\r\n          skipPreflight: true,\r\n        });\r\n        await sleep(500);\r\n      }\r\n    })();\r\n    try {\r\n      const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'recent',\r\n        true,\r\n      );\r\n  \r\n      if (!confirmation)\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n  \r\n      if (confirmation.err) {\r\n        console.error(confirmation.err);\r\n        throw new Error('Transaction failed: Custom instruction error');\r\n      }\r\n  \r\n      slot = confirmation?.slot || 0;\r\n    } catch (err: any) {\r\n      console.error('Timeout Error caught', err);\r\n      if (err.timeout) {\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n      }\r\n      let simulateResult: SimulatedTransactionResponse | null = null;\r\n      try {\r\n        simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n        ).value;\r\n      } catch (e) { }\r\n      if (simulateResult && simulateResult.err) {\r\n        if (simulateResult.logs) {\r\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n            const line = simulateResult.logs[i];\r\n            if (line.startsWith('Program log: ')) {\r\n              throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n              );\r\n            }\r\n          }\r\n        }\r\n        throw new Error(JSON.stringify(simulateResult.err));\r\n      }\r\n      // throw new Error('Transaction failed');\r\n    } finally {\r\n      done = true;\r\n    }\r\n  \r\n    console.log('Latency', txid, getUnixTs() - startTime);\r\n    return { txid, slot };\r\n  }\r\n  \r\n  async function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n    // @ts-ignore\r\n    transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n    );\r\n  \r\n    const signData = transaction.serializeMessage();\r\n    // @ts-ignore\r\n    const wireTransaction = transaction._serialize(signData);\r\n    const encodedTransaction = wireTransaction.toString('base64');\r\n    const config: any = { encoding: 'base64', commitment };\r\n    const args = [encodedTransaction, config];\r\n  \r\n    // @ts-ignore\r\n    const res = await connection._rpcRequest('simulateTransaction', args);\r\n    if (res.error) {\r\n      throw new Error('failed to simulate transaction: ' + res.error.message);\r\n    }\r\n    return res.result;\r\n  }\r\n  \r\n  async function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'recent',\r\n    queryStatus = false,\r\n  ): Promise<SignatureStatus | null | void> {\r\n    let done = false;\r\n    let status: SignatureStatus | null | void = {\r\n      slot: 0,\r\n      confirmations: 0,\r\n      err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await new Promise(async (resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (done) {\r\n          return;\r\n        }\r\n        done = true;\r\n        console.log('Rejecting for timeout...');\r\n        reject({ timeout: true });\r\n      }, timeout);\r\n      try {\r\n        subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              console.log('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              console.log('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n        );\r\n      } catch (e) {\r\n        done = true;\r\n        console.error('WS error in setup', txid, e);\r\n      }\r\n      while (!done && queryStatus) {\r\n        // eslint-disable-next-line no-loop-func\r\n        (async () => {\r\n          try {\r\n            const signatureStatuses = await connection.getSignatureStatuses([\r\n              txid,\r\n            ]);\r\n            status = signatureStatuses && signatureStatuses.value[0];\r\n            if (!done) {\r\n              if (!status) {\r\n                console.log('REST null result for', txid, status);\r\n              } else if (status.err) {\r\n                console.log('REST error for', txid, status);\r\n                done = true;\r\n                reject(status.err);\r\n              } else if (!status.confirmations) {\r\n                console.log('REST no confirmations for', txid, status);\r\n              } else {\r\n                console.log('REST confirmation for', txid, status);\r\n                done = true;\r\n                resolve(status);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            if (!done) {\r\n              console.log('REST connection error: txid', txid, e);\r\n            }\r\n          }\r\n        })();\r\n        await sleep(2000);\r\n      }\r\n    });\r\n  \r\n    //@ts-ignore\r\n    if (connection._signatureSubscriptions[subId])\r\n      connection.removeSignatureListener(subId);\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n  }\r\n  export function sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n  ","import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\r\nimport {CandyMachine} from './candy-machine';\r\n\r\n\r\nexport const CTAButton = styled(Button)`\r\n  border-radius: 7px !important;\r\n  padding: 30px;\r\n  background-color: #4E44CE;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nexport const MintButton = ({\r\n                               onMint,\r\n                               candyMachine,\r\n                               isMinting,\r\n                               isEnded,\r\n                               isActive,\r\n                               isSoldOut\r\n                           }: {\r\n    onMint: () => Promise<void>;\r\n    candyMachine: CandyMachine | undefined;\r\n    isMinting: boolean;\r\n    isEnded: boolean;\r\n    isActive: boolean;\r\n    isSoldOut: boolean;\r\n}) => {\r\n    const {requestGatewayToken, gatewayStatus} = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint();\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n    return (\r\n        <CTAButton\r\n            disabled={\r\n                clicked ||\r\n                candyMachine?.state.isSoldOut ||\r\n                isSoldOut ||\r\n                isMinting ||\r\n                isEnded ||\r\n                !isActive ||\r\n                isVerifying\r\n            }\r\n            onClick={async () => {\r\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                    console.log('Requesting gateway token');\r\n                    setClicked(true);\r\n                    await requestGatewayToken();\r\n                } else {\r\n                    console.log('Minting...');\r\n                    await onMint();\r\n                }\r\n            }}\r\n            variant=\"contained\"\r\n        >\r\n            {!candyMachine ? (\r\n                \"CONNECTING...\"\r\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n                'SOLD OUT'\r\n            ) : isActive ? (\r\n                isVerifying ? 'VERIFYING...' :\r\n                    isMinting || clicked ? (\r\n                        <CircularProgress/>\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\r\n                \"SOON\"\r\n            ) : (\r\n                \"UNAVAILABLE\"\r\n            ))}\r\n        </CTAButton>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\r\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletMultiButton } from \"@solana/wallet-adapter-react-ui\";\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport Countdown from \"react-countdown\";\r\nimport { Snackbar, Paper, LinearProgress, Chip } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { toDate, AlertState, getAtaForMint } from './utils';\r\nimport { MintButton } from './MintButton';\r\nimport \"./responsive.css\";\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  CANDY_MACHINE_PROGRAM,\r\n} from \"./candy-machine\";\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\r\n\r\nconst WalletContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst MainTitle = styled.h1`\r\n  font-size: 66px;\r\n  font-family: 'Raleway';\r\n  font-style: italic;\r\n  font-weight: 900;\r\n  margin: 0 0 15px 0;\r\n`;\r\n\r\nconst TotalMinted = styled.p`\r\n  margin-top: 25px;\r\n  font-size: 14px;\r\n  color: #E0E0E0;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst WhitelistNotification = styled.p`\r\n  margin: 15px 0 0 0;\r\n  font-size: 14px;\r\n  color: #E0E0E0;\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst IconContainer = styled.div`\r\n  display: block;\r\n  margin-top: auto;\r\n  margin-bottom: auto;\r\n`;\r\n\r\nconst InfoIcon = styled.img`\r\n  height: 22px;\r\n  margin: 0 8px;\r\n  vertical-align: top;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n  display: inline-flex;\r\n`;\r\n\r\nconst IconLink = styled.a`\r\n  text-decoration: none;\r\n`;\r\n\r\nconst TotalItems = styled.p`\r\n  font-size: 16px;\r\n  font-family: 'Poppins';\r\n  font-weight: 400;\r\n  margin: 0 10px 0 0;\r\n  border: 2px solid #fff;\r\n  border-radius: 5px;\r\n  padding: 3px 20px;\r\n  text-transform: uppercase;\r\n  line-height: 28px;\r\n`;\r\n\r\nconst Price = styled.p`\r\n  font-weight: 400;\r\n  font-size: 16px;\r\n  font-family: 'Poppins' !important;\r\n  margin: 0 10px 0 0;\r\n  border: 2px solid #fff;\r\n  border-radius: 5px;\r\n  padding: 3px 20px;\r\n  text-transform: uppercase;\r\n  line-height: 28px;\r\n`;\r\n\r\nconst ProjectDescription = styled.p`\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  line-height: 40px;\r\n  font-family: 'Montserrat', sans-serif;\r\n  color: #E0E0E0;\r\n`;\r\n\r\nconst WalletAmount = styled.div`\r\n  color: black;\r\n  width: auto;\r\n  padding: 5px 5px 5px 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 22px;\r\n  background-color: var(--main-text-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: 0;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: flex-start;\r\n  gap: 10px;\r\n`;\r\n\r\nconst Wallet = styled.ul`\r\n  flex: 0 0 auto;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst ConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 7px !important;\r\n  padding: 30px;\r\n  background-color: #4E44CE;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  font-family: Montserrat, sans-serif !important;\r\n  font-size: 18px !important;\r\n  font-weight: 500 !important;\r\n  text-transform: uppercase !important;\r\n  text-align: center !important;\r\n`;\r\n\r\n\r\nconst Card = styled(Paper)`\r\n  display: inline-block;\r\n  background-color: var(card-background-lighter-color) !important;\r\n  margin: 5px;\r\n  min-width: 40px;\r\n  padding: 24px;\r\n  h1{\r\n    margin:0px;\r\n  }\r\n`;\r\n\r\nconst MintButtonContainer = styled.div`\r\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\r\n    color: #fff;\r\n  }\r\n  .MuiButton-contained {\r\n    background-color: #4E44CE !important;\r\n    color: #fff !important;\r\n    font-family: 'Montserrat', sans-serif !important;\r\n    font-size: 18px !important;\r\n    font-weight: 500 !important;\r\n    text-transform: uppercase !important;\r\n    text-align: center !important;\r\n  }\r\n  .MuiButton-label {\r\n    align-items: center !important;\r\n    justify-content: center !important;\r\n  }\r\n  .MuiButton-root {\r\n    padding: 18px !important;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  flex: 0 0 auto;\r\n\r\n  img {\r\n    height: 60px;\r\n  }\r\n`;\r\nconst Menu = styled.ul`\r\n  list-style: none;\r\n  display: inline-flex;\r\n  flex: 1 0 auto;\r\n\r\n  li {\r\n    margin: 0 12px;\r\n\r\n    a {\r\n      color: var(--main-text-color);\r\n      list-style-image: none;\r\n      list-style-position: outside;\r\n      list-style-type: none;\r\n      outline: none;\r\n      text-decoration: none;\r\n      text-size-adjust: 100%;\r\n      touch-action: manipulation;\r\n      transition: color 0.3s;\r\n      padding-bottom: 15px;\r\n\r\n      img {\r\n        max-height: 26px;\r\n      }\r\n    }\r\n\r\n    a:hover, a:active {\r\n      color: rgb(131, 146, 161);\r\n      border-bottom: 4px solid var(--title-text-color);\r\n    }\r\n\r\n  }\r\n`;\r\n\r\nconst SolExplorerLink = styled.a`\r\n  color: var(--title-text-color);\r\n  border-bottom: 1px solid var(--title-text-color);\r\n  font-weight: bold;\r\n  list-style-image: none;\r\n  list-style-position: outside;\r\n  list-style-type: none;\r\n  outline: none;\r\n  text-decoration: none;\r\n  text-size-adjust: 100%;\r\n\r\n  :hover {\r\n    border-bottom: 2px solid var(--title-text-color);\r\n  }\r\n`;\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  max-width: 1200px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n`;\r\n\r\nconst LeftContainer = styled.div`\r\n  width: 50%;\r\n  max-width: 50%;\r\n  text-align: left;\r\n  margin: 10px\r\n`;\r\n\r\nconst RightContainer = styled.div`\r\n  width: 50%;\r\n  max-width: 50%;\r\n  text-align: left;\r\n  margin: 10px;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  height: 500px;\r\n  width: auto;\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\r\n\r\n`;\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)`\r\n  height: 10px !important;\r\n  border-radius: 30px;\r\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\r\n  background-color: #262626 !important;\r\n\r\n  > div.MuiLinearProgress-barColorPrimary{\r\n    background-color: #4E44CE !important;\r\n  }\r\n\r\n  > div.MuiLinearProgress-bar1Determinate {\r\n    border-radius: 30px !important;\r\n    background-color: #4E44CE;\r\n  }\r\n`;\r\n\r\nconst LogoAligner = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  img {\r\n    max-height: 35px;\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n  const [isSoldOut, setIsSoldOut] = useState(false);\r\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n  const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n  const [isBurnToken, setIsBurnToken] = useState(false);\r\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n  const [isEnded, setIsEnded] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [isWLOnly, setIsWLOnly] = useState(false);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const wallet = useAnchorWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n\r\n  const refreshCandyMachineState = () => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n\r\n      const cndy = await getCandyMachineState(\r\n        wallet as anchor.Wallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n      setCandyMachine(cndy);\r\n      setItemsAvailable(cndy.state.itemsAvailable);\r\n      setItemsRemaining(cndy.state.itemsRemaining);\r\n      setItemsRedeemed(cndy.state.itemsRedeemed);\r\n\r\n      var divider = 1;\r\n      if (decimals) {\r\n        divider = +('1' + new Array(decimals).join('0').slice() + '0');\r\n      }\r\n\r\n      // detect if using spl-token to mint\r\n      if (cndy.state.tokenMint) {\r\n        setPayWithSplToken(true);\r\n        // Customize your SPL-TOKEN Label HERE\r\n        // TODO: get spl-token metadata name\r\n        setPriceLabel(splTokenName);\r\n        setPrice(cndy.state.price.toNumber() / divider);\r\n        setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n      } else {\r\n        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n      }\r\n\r\n\r\n      // fetch whitelist token balance\r\n      if (cndy.state.whitelistMintSettings) {\r\n        setWhitelistEnabled(true);\r\n        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\r\n        setIsPresale(cndy.state.whitelistMintSettings.presale);\r\n        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\r\n\r\n        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\r\n          if (cndy.state.tokenMint) {\r\n            setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice ?.toNumber() / divider);\r\n          } else {\r\n            setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice ?.toNumber() / LAMPORTS_PER_SOL);\r\n          }\r\n        }\r\n\r\n        let balance = 0;\r\n        try {\r\n          const tokenBalance =\r\n            await props.connection.getTokenAccountBalance(\r\n              (\r\n                await getAtaForMint(\r\n                  cndy.state.whitelistMintSettings.mint,\r\n                  wallet.publicKey,\r\n                )\r\n              )[0],\r\n            );\r\n\r\n          balance = tokenBalance ?.value ?.uiAmount || 0;\r\n        } catch (e) {\r\n          console.error(e);\r\n          balance = 0;\r\n        }\r\n        setWhitelistTokenBalance(balance);\r\n        setIsActive(isPresale && !isEnded && balance > 0);\r\n      } else {\r\n        setWhitelistEnabled(false);\r\n      }\r\n\r\n      // end the mint when date is reached\r\n      if (cndy ?.state.endSettings ?.endSettingType.date) {\r\n        setEndDate(toDate(cndy.state.endSettings.number));\r\n        if (\r\n          cndy.state.endSettings.number.toNumber() <\r\n          new Date().getTime() / 1000\r\n        ) {\r\n          setIsEnded(true);\r\n          setIsActive(false);\r\n        }\r\n      }\r\n      // end the mint when amount is reached\r\n      if (cndy ?.state.endSettings ?.endSettingType.amount) {\r\n        let limit = Math.min(\r\n          cndy.state.endSettings.number.toNumber(),\r\n          cndy.state.itemsAvailable,\r\n        );\r\n        setItemsAvailable(limit);\r\n        if (cndy.state.itemsRedeemed < limit) {\r\n          setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n        } else {\r\n          setItemsRemaining(0);\r\n          cndy.state.isSoldOut = true;\r\n          setIsEnded(true);\r\n        }\r\n      } else {\r\n        setItemsRemaining(cndy.state.itemsRemaining);\r\n      }\r\n\r\n      if (cndy.state.isSoldOut) {\r\n        setIsActive(false);\r\n      }\r\n    })();\r\n  };\r\n\r\n  const renderGoLiveDateCounter = ({ days, hours, minutes, seconds }: any) => {\r\n    return (\r\n      <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\r\n        Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\r\n          <h1>{seconds}</h1>Secs</Card></div>\r\n    );\r\n  };\r\n\r\n  const renderEndDateCounter = ({ days, hours, minutes }: any) => {\r\n    let label = \"\";\r\n    if (days > 0) {\r\n      label += days + \" days \"\r\n    }\r\n    if (hours > 0) {\r\n      label += hours + \" hours \"\r\n    }\r\n    label += (minutes + 1) + \" minutes left to MINT.\"\r\n    return (\r\n      <div><h3>{label}</h3></div>\r\n    );\r\n  };\r\n\r\n  function displaySuccess(mintPublicKey: any): void {\r\n    let remaining = itemsRemaining - 1;\r\n    setItemsRemaining(remaining);\r\n    setIsSoldOut(remaining === 0);\r\n    if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n      let balance = whitelistTokenBalance - 1;\r\n      setWhitelistTokenBalance(balance);\r\n      setIsActive(isPresale && !isEnded && balance > 0);\r\n    }\r\n    setItemsRedeemed(itemsRedeemed + 1);\r\n    const solFeesEstimation = 0.012; // approx\r\n    if (!payWithSplToken && balance && balance > 0) {\r\n      setBalance(balance - (whitelistEnabled ? whitelistPrice : price) - solFeesEstimation);\r\n    }\r\n    setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\r\n      ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\r\n      : (\"https://solscan.io/token/\" + mintPublicKey));\r\n    throwConfetti();\r\n  };\r\n\r\n  function throwConfetti(): void {\r\n    confetti({\r\n      particleCount: 400,\r\n      spread: 70,\r\n      origin: { y: 0.6 },\r\n    });\r\n  }\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet && candyMachine ?.program && wallet.publicKey) {\r\n        const mint = anchor.web3.Keypair.generate();\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey, mint)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            'singleGossip',\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (!status ?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n\r\n          // update front-end amounts\r\n          displaySuccess(mint.publicKey);\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction Timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x138')) {\r\n        } else if (error.message.indexOf('0x137')) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    isEnded,\r\n    isPresale\r\n  ]);\r\n\r\n  return (\r\n    <main>\r\n      <MainContainer className=\"maincontainer\">\r\n        <LeftContainer className=\"leftcontainer\">\r\n          <Image className=\"nft-image\" src=\"yourimagehere.png\" alt=\"Mint a YOURNFT\" />\r\n        </LeftContainer>\r\n        <RightContainer className=\"rightcontainer\">\r\n          <MainTitle className=\"maintitle\">Your NFT Name</MainTitle>\r\n          <InfoContainer>\r\n            <TotalItems className=\"totalitems\">Total Items {itemsAvailable}</TotalItems>\r\n            <Price className=\"price\">Price ◎ {isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \") : (price + \" \")} </Price>\r\n            <IconContainer>\r\n              <IconLink className=\"infoIcon\" href=\"#\" target=\"__blank\"> <InfoIcon src=\"website.svg\" /> </IconLink>\r\n              <IconLink className=\"infoIcon\" href=\"#\" target=\"__blank\"> <InfoIcon src=\"discord.svg\" /> </IconLink>\r\n              <IconLink className=\"infoIcon\" href=\"#\" target=\"__blank\"> <InfoIcon src=\"twitter.svg\" /> </IconLink>\r\n            </IconContainer>\r\n          </InfoContainer>\r\n          <ProjectDescription>This front-end for Candy Machine V2 was made possible by Zaab Studio. Free to use & public to copy for everyone!</ProjectDescription>\r\n          <MintButtonContainer>\r\n            {!isActive && !isEnded && candyMachine ?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\r\n              <Countdown\r\n                date={toDate(candyMachine ?.state.goLiveDate)}\r\n                onMount={({ completed }) => completed && setIsActive(!isEnded)}\r\n                onComplete={() => {\r\n                  setIsActive(!isEnded);\r\n                }}\r\n                renderer={renderGoLiveDateCounter}\r\n              />) : (\r\n                !wallet ? (\r\n                  <ConnectButton>Connect Wallet</ConnectButton>\r\n                ) : (!isWLOnly || whitelistTokenBalance > 0) ?\r\n                    candyMachine ?.state.gatekeeper &&\r\n                      wallet.publicKey &&\r\n                      wallet.signTransaction ? (\r\n                        <GatewayProvider\r\n                          wallet={{\r\n                            publicKey:\r\n                              wallet.publicKey ||\r\n                              new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                            //@ts-ignore\r\n                            signTransaction: wallet.signTransaction,\r\n                          }}\r\n                          // // Replace with following when added\r\n                          // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                          gatekeeperNetwork={\r\n                            candyMachine ?.state ?.gatekeeper ?.gatekeeperNetwork\r\n                                                } // This is the ignite (captcha) network\r\n                          /// Don't need this for mainnet\r\n                          clusterUrl={rpcUrl}\r\n                          options={{ autoShowModal: false }}\r\n                        >\r\n                          <MintButton\r\n                            candyMachine={candyMachine}\r\n                            isMinting={isMinting}\r\n                            isActive={isActive}\r\n                            isEnded={isEnded}\r\n                            isSoldOut={isSoldOut}\r\n                            onMint={onMint}\r\n                          />\r\n                        </GatewayProvider>\r\n                      ) : (\r\n                        <MintButton\r\n                          candyMachine={candyMachine}\r\n                          isMinting={isMinting}\r\n                          isActive={isActive}\r\n                          isEnded={isEnded}\r\n                          isSoldOut={isSoldOut}\r\n                          onMint={onMint}\r\n                        />\r\n                      ) :\r\n                      <h1>Mint is private.</h1>\r\n                                        )}\r\n          </MintButtonContainer>\r\n          {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\r\n            <WhitelistNotification>You own <b>{whitelistTokenBalance}</b> WL mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\"}.</WhitelistNotification>}\r\n          {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\r\n            <WhitelistNotification>You are whitelisted and allowed to mint.</WhitelistNotification>}\r\n          {wallet && isActive &&\r\n            <TotalMinted>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</TotalMinted>}\r\n          {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\r\n            value={100 - (itemsRemaining * 100 / itemsAvailable)} />}\r\n          <br />\r\n          {wallet && isActive && solanaExplorerLink &&\r\n            <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on Solscan</SolExplorerLink>}\r\n        </RightContainer>\r\n      </MainContainer>\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolflareWebWallet,\r\n    getSolletWallet,\r\n    getSolletExtensionWallet,\r\n    getSolongWallet,\r\n    getLedgerWallet,\r\n    getSafePalWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n    WalletModalProvider\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport \"./App.css\";\r\nimport Home from \"./Home\";\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    // Custom RPC endpoint.\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\r\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\r\n    // of wallets that your users connect to will be loaded.\r\n    const wallets = useMemo(\r\n        () => [\r\n            getPhantomWallet(),\r\n            getSlopeWallet(),\r\n            getSolflareWallet(),\r\n            getSolflareWebWallet(),\r\n            getSolletWallet({ network }),\r\n            getSolletExtensionWallet({ network }),\r\n            getSolongWallet(),\r\n            getLedgerWallet(),\r\n            getSafePalWallet(),\r\n        ],\r\n        []\r\n    );\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect={true}>\r\n            <WalletModalProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                connection={connection}\r\n                txTimeout={txTimeout}\r\n                rpcHost={rpcHost}\r\n              />\r\n            </WalletModalProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n"],"sourceRoot":""}